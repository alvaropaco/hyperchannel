{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","hyperchannel/tests/app.jshint.js","hyperchannel/tests/components/app-container/component.jshint.js","hyperchannel/tests/components/channel-container/component.jshint.js","hyperchannel/tests/components/channel-input-field/component.jshint.js","hyperchannel/tests/components/channel-nav/component.jshint.js","hyperchannel/tests/components/message-chat-me/component.jshint.js","hyperchannel/tests/components/message-chat/component.jshint.js","hyperchannel/tests/components/notification-topic-change/component.jshint.js","hyperchannel/tests/controllers/application.jshint.js","hyperchannel/tests/controllers/index.jshint.js","hyperchannel/tests/controllers/settings.jshint.js","hyperchannel/tests/controllers/space.jshint.js","hyperchannel/tests/controllers/space/base_channel.jshint.js","hyperchannel/tests/controllers/space/channel.jshint.js","hyperchannel/tests/controllers/space/user_channel.jshint.js","hyperchannel/tests/ember-gestures/recognizers/swipeleft.jshint.js","hyperchannel/tests/ember-gestures/recognizers/swiperight.jshint.js","hyperchannel/tests/helpers/destroy-app.js","hyperchannel/tests/helpers/destroy-app.jshint.js","hyperchannel/tests/helpers/module-for-acceptance.js","hyperchannel/tests/helpers/module-for-acceptance.jshint.js","hyperchannel/tests/helpers/resolver.js","hyperchannel/tests/helpers/resolver.jshint.js","hyperchannel/tests/helpers/start-app.js","hyperchannel/tests/helpers/start-app.jshint.js","hyperchannel/tests/initializers/sockethub.jshint.js","hyperchannel/tests/integration/components/app-container-test.js","hyperchannel/tests/integration/components/app-container-test.jshint.js","hyperchannel/tests/integration/components/channel-container/component-test.js","hyperchannel/tests/integration/components/channel-container/component-test.jshint.js","hyperchannel/tests/models/channel.jshint.js","hyperchannel/tests/models/message.jshint.js","hyperchannel/tests/models/space.jshint.js","hyperchannel/tests/models/user_channel.jshint.js","hyperchannel/tests/resolver.jshint.js","hyperchannel/tests/router.jshint.js","hyperchannel/tests/routes/application.jshint.js","hyperchannel/tests/routes/settings.jshint.js","hyperchannel/tests/routes/space.jshint.js","hyperchannel/tests/routes/space/base_channel.jshint.js","hyperchannel/tests/routes/space/channel.jshint.js","hyperchannel/tests/routes/space/user_channel.jshint.js","hyperchannel/tests/services/smt.jshint.js","hyperchannel/tests/test-helper.js","hyperchannel/tests/test-helper.jshint.js","hyperchannel/tests/unit/components/channel-input-field-test.js","hyperchannel/tests/unit/components/channel-input-field-test.jshint.js","hyperchannel/tests/unit/components/channel-nav-test.js","hyperchannel/tests/unit/components/channel-nav-test.jshint.js","hyperchannel/tests/unit/components/message-chat-test.js","hyperchannel/tests/unit/components/message-chat-test.jshint.js","hyperchannel/tests/unit/models/channel-test.js","hyperchannel/tests/unit/models/channel-test.jshint.js","hyperchannel/tests/unit/models/space-test.js","hyperchannel/tests/unit/models/space-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('hyperchannel/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/components/app-container/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/app-container/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/app-container/component.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/components/channel-container/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/channel-container/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/channel-container/component.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/components/channel-input-field/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/channel-input-field/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/channel-input-field/component.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/components/channel-nav/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/channel-nav/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/channel-nav/component.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/components/message-chat-me/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/message-chat-me/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/message-chat-me/component.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/components/message-chat/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/message-chat/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/message-chat/component.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/components/notification-topic-change/component.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | components/notification-topic-change/component.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/notification-topic-change/component.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/controllers/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/controllers/settings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/settings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/settings.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/controllers/space.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/space.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/space.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/controllers/space/base_channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/space/base_channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/space/base_channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/controllers/space/channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/space/channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/space/channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/controllers/space/user_channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | controllers/space/user_channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/space/user_channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/ember-gestures/recognizers/swipeleft.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | ember-gestures/recognizers/swipeleft.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-gestures/recognizers/swipeleft.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/ember-gestures/recognizers/swiperight.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | ember-gestures/recognizers/swiperight.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-gestures/recognizers/swiperight.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('hyperchannel/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'hyperchannel/tests/helpers/start-app', 'hyperchannel/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _hyperchannelTestsHelpersStartApp, _hyperchannelTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _hyperchannelTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _hyperchannelTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('hyperchannel/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/helpers/resolver', ['exports', 'hyperchannel/resolver', 'hyperchannel/config/environment'], function (exports, _hyperchannelResolver, _hyperchannelConfigEnvironment) {\n\n  var resolver = _hyperchannelResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _hyperchannelConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _hyperchannelConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('hyperchannel/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/helpers/start-app', ['exports', 'ember', 'hyperchannel/app', 'hyperchannel/config/environment'], function (exports, _ember, _hyperchannelApp, _hyperchannelConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _hyperchannelConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _hyperchannelApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('hyperchannel/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/initializers/sockethub.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | initializers/sockethub.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/sockethub.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/integration/components/app-container-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('app-container', 'Integration | Component | app container', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 17\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'app-container', ['loc', [null, [1, 0], [1, 17]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'revision': 'Ember@2.8.3',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'app-container', [], [], 0, null, ['loc', [null, [2, 4], [4, 22]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('hyperchannel/tests/integration/components/app-container-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/app-container-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/app-container-test.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/integration/components/channel-container/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('channel-container', 'Integration | Component | channel container', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'revision': 'Ember@2.8.3',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 21\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'channel-container', ['loc', [null, [1, 0], [1, 21]]], 0, 0, 0, 0]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('hyperchannel/tests/integration/components/channel-container/component-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | integration/components/channel-container/component-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/channel-container/component-test.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/models/channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/models/message.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/message.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/message.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/models/space.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/space.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/space.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/models/user_channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | models/user_channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user_channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/routes/settings.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/settings.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/settings.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/routes/space.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/space.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/space.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/routes/space/base_channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/space/base_channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/space/base_channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/routes/space/channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/space/channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/space/channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/routes/space/user_channel.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | routes/space/user_channel.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/space/user_channel.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/services/smt.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | services/smt.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/smt.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/test-helper', ['exports', 'hyperchannel/tests/helpers/resolver', 'ember-qunit'], function (exports, _hyperchannelTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_hyperchannelTestsHelpersResolver['default']);\n});","define('hyperchannel/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/unit/components/channel-input-field-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('channel-input-field', {\n    // Specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n});","define('hyperchannel/tests/unit/components/channel-input-field-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/channel-input-field-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/channel-input-field-test.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/unit/components/channel-nav-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('channel-nav', {\n    // Specify the other units that are required for this test\n    // needs: ['component:foo', 'helper:bar']\n    unit: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Creates the component instance\n    var component = this.subject();\n    assert.equal(component._state, 'preRender');\n\n    // Renders the component to the page\n    this.render();\n    assert.equal(component._state, 'inDOM');\n  });\n});","define('hyperchannel/tests/unit/components/channel-nav-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/channel-nav-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/channel-nav-test.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/unit/components/message-chat-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('message-chat', 'Unit | Component | message-chat', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('#formattedContent turns full URLs into links', function (assert) {\n    var component = this.subject({\n      message: { content: 'visit https://kosmos.org for more info' }\n    });\n\n    assert.equal(component.get('formattedContent').toString(), 'visit <a href=\"https://kosmos.org\" class=\"linkified\" target=\"_blank\" rel=\"nofollow\">https://kosmos.org</a> for more info');\n  });\n\n  (0, _emberQunit.test)('#formattedContent does not turn domain names into links', function (assert) {\n    var component = this.subject({\n      message: { content: 'visit kosmos.org for more info' }\n    });\n\n    assert.equal(component.get('formattedContent').toString(), 'visit kosmos.org for more info');\n  });\n\n  (0, _emberQunit.test)('#formattedContent escapes HTML', function (assert) {\n    var component = this.subject({\n      message: { content: 'never gonna <marquee>give you up</marquee>' }\n    });\n\n    assert.equal(component.get('formattedContent').toString(), 'never gonna &lt;marquee&gt;give you up&lt;/marquee&gt;');\n  });\n\n  (0, _emberQunit.test)('#formattedContent converts color codes', function (assert) {\n    var component = this.subject({\n      message: { content: 'put some \\u000313color\\u000f into your life' }\n    });\n\n    assert.equal(component.get('formattedContent').toString(), 'put some <span class=\"color-13\">color</span> into your life');\n  });\n});","define('hyperchannel/tests/unit/components/message-chat-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/components/message-chat-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/message-chat-test.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/unit/models/channel-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('model:channel', 'Unit | Model | channel');\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('#slug', function (assert) {\n    var model = this.subject();\n    model.set('name', '#kosmos-dev');\n\n    assert.ok(model.get('slug') === 'kosmos-dev');\n  });\n\n  //\n  // formattedTopic\n  //\n\n  (0, _emberQunit.test)('#formattedTopic turns URLs into links', function (assert) {\n    var channel = this.subject();\n    channel.set('topic', 'visit kosmos.org for more info');\n\n    assert.equal(channel.get('formattedTopic').toString(), 'visit <a href=\"https://kosmos.org\" class=\"linkified\" target=\"_blank\" rel=\"nofollow\">kosmos.org</a> for more info');\n  });\n\n  (0, _emberQunit.test)('#formattedTopic escapes HTML', function (assert) {\n    var channel = this.subject();\n    channel.set('topic', 'never gonna <marquee>give you up</marquee>');\n\n    assert.equal(channel.get('formattedTopic').toString(), 'never gonna &lt;marquee&gt;give you up&lt;/marquee&gt;');\n  });\n\n  //\n  // unreadMessagesClass\n  //\n\n  (0, _emberQunit.test)('#unreadMessagesClass is null when channel is visible', function (assert) {\n    var channel = this.subject();\n    channel.set('unreadMessages', true);\n    channel.set('visible', true);\n\n    assert.equal(channel.get('unreadMessagesClass'), null);\n  });\n\n  (0, _emberQunit.test)('#unreadMessagesClass is null when channel has no unread messages', function (assert) {\n    var channel = this.subject();\n    channel.set('unreadMessages', false);\n    channel.set('visible', false);\n\n    assert.equal(channel.get('unreadMessagesClass'), null);\n  });\n\n  (0, _emberQunit.test)('#unreadMessagesClass is correct for unread messages', function (assert) {\n    var channel = this.subject();\n    channel.set('unreadMessages', true);\n    channel.set('unreadMentions', false);\n    channel.set('visible', false);\n\n    assert.equal(channel.get('unreadMessagesClass'), 'unread-messages');\n  });\n\n  (0, _emberQunit.test)('#unreadMessagesClass is correct for unread mentions', function (assert) {\n    var channel = this.subject();\n    channel.set('unreadMessages', true);\n    channel.set('unreadMentions', true);\n    channel.set('visible', false);\n\n    assert.equal(channel.get('unreadMessagesClass'), 'unread-mentions');\n  });\n});","define('hyperchannel/tests/unit/models/channel-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/channel-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/channel-test.js should pass jshint.');\n  });\n});","define('hyperchannel/tests/unit/models/space-test', ['exports', 'ember-qunit', 'hyperchannel/models/channel'], function (exports, _emberQunit, _hyperchannelModelsChannel) {\n\n  (0, _emberQunit.moduleFor)('model:space', 'Unit | Model | space');\n\n  (0, _emberQunit.test)('#sortedChannels returns channels sorted by name', function (assert) {\n    var space = this.subject();\n\n    space.set('channels', [_hyperchannelModelsChannel['default'].create({ name: 'dominica' }), _hyperchannelModelsChannel['default'].create({ name: 'phu quoc' }), _hyperchannelModelsChannel['default'].create({ name: 'lamu' }), _hyperchannelModelsChannel['default'].create({ name: 'canoa' }), _hyperchannelModelsChannel['default'].create({ name: 'flores' })]);\n\n    var sortedChannels = space.get('sortedChannels');\n    assert.deepEqual(sortedChannels.mapBy('name'), ['canoa', 'dominica', 'flores', 'lamu', 'phu quoc']);\n  });\n});","define('hyperchannel/tests/unit/models/space-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint | unit/models/space-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/space-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('hyperchannel/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACllBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}